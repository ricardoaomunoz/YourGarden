"""empty message

Revision ID: 9e38ae27ff01
Revises: 
Create Date: 2020-06-06 18:45:51.097796

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '9e38ae27ff01'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('planting_technique')
    op.drop_table('plant_user')
    op.drop_table('stage')
    op.drop_table('peripherals')
    op.drop_table('growing')
    op.drop_table('plant')
    op.drop_table('germination_type')
    op.drop_table('sensors')
    op.drop_table('plant_history')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('plant_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('seed_bank', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('comments', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('plant_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('meta_data', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('substrate', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('matera_size', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('germination_type_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('planting_technique_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('stage_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_system', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('time', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('plant_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('imagen', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('growing_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['germination_type_id'], ['germination_type.id'], name='fk_id_germinationtype_planthistory', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['growing_id'], ['growing.id'], name='fk_id_growing_planthistory', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['plant_user_id'], ['plant_user.id'], name='fk_id_plantuser_planthistory', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['planting_technique_id'], ['planting_technique.id'], name='fk_id_plantingtechnique_planthistory', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['stage_id'], ['stage.id'], name='fk_id_stage_planthistory', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='plant_history_pkey')
    )
    op.create_table('sensors',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('value', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('unit', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('growing_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['growing_id'], ['growing.id'], name='fk_id_growing_sensors', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='sensors_pkey')
    )
    op.create_table('germination_type',
    sa.Column('name', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('comments', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"GERMINATION_TYPE_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id', name='GERMINATION_TYPE_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('plant',
    sa.Column('banco', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('comentario', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('fecha_ingreso', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"PLANT_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('meta_data', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('sustrato', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('volumen_matera', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('germination_type_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('planting_technique_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('stage_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('plants_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('imagen', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('growing_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('nikname', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['germination_type_id'], ['germination_type.id'], name='fkgermination_type'),
    sa.ForeignKeyConstraint(['growing_id'], ['growing.id'], name='fk_id_growing_plants', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['planting_technique_id'], ['planting_technique.id'], name='fkplanting_technique'),
    sa.ForeignKeyConstraint(['plants_user_id'], ['plant_user.id'], name='fkplant_user'),
    sa.ForeignKeyConstraint(['stage_id'], ['stage.id'], name='fkstage'),
    sa.PrimaryKeyConstraint('id', name='PLANT_pkey')
    )
    op.create_table('growing',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('growing_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('plants_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['plants_user_id'], ['plant_user.id'], name='fk_id_user', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='growing_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('peripherals',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('state', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('growing_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['growing_id'], ['growing.id'], name='fk_id_growing_peripherals', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='peripherals_pkey')
    )
    op.create_table('stage',
    sa.Column('name', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('comments', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"STAGE_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id', name='STAGE_pkey')
    )
    op.create_table('plant_user',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('nit', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('username', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('password', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='plant_user_pkey')
    )
    op.create_table('planting_technique',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('comments', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='planting_technique_pkey')
    )
    # ### end Alembic commands ###
